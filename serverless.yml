service:
  name: spotter

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-1'}
  #stage: ${opt:stage, self:custom.defaultStage}
  #profile: ${self:custom.profiles.${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["SpottersDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["TravelBandDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["ActivitiesDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["OfficeDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["BookingDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["AvailabilitiesDynamodbTable", "Arn" ] }
        - { "Fn::GetAtt": ["TravelBandActivitiesDynamodbTable", "Arn" ] }
  environment:
    LOCAL_ENDPOINT: ${file(./config.${self:provider.stage}.json):AWS_ENDPOINT}
    LOCAL_REGION: ${file(./config.${self:provider.stage}.json):AWS_REGION}
    DB_TABLE_BOOKINGS: ${self:custom.tables.bookings}
    DB_TABLE_TRAVELBANDS: ${self:custom.tables.travelBands}
    DB_TABLE_TRAVELBANDACTIVITIES: ${self:custom.tables.travelBandActivities}
    DB_TABLE_ACTIVITIES: ${self:custom.tables.activities}
    DB_TABLE_AVAILABILITIES: ${self:custom.tables.availabilities}
    DB_TABLE_SPOTTERS: ${self:custom.tables.spotters}
    DB_TABLE_OFFCIES: ${self:custom.tables.offices}

custom:
  # DynamoDB table names
  tables:
    bookings: bookings
    travelBands: travelBands
    travelBandActivities: travelBandActivities
    activities: activities
    availabilities: availabilities
    spotters: spotters
    offices: offices
  defaultStage: dev
  profiles:
    dev: dev
    staging: staging
    prod: prod
  dynamodb:
    start:
      migrate: true
      seed: true
      port: 8000
    seed:
      travelBands:
        sources:
          - table: ${self:custom.tables.travelBands}
            sources: [./seeds/travelBands.json]
          - table: ${self:custom.tables.travelBandActivities}
            sources: [./seeds/travelBandActivities.json]
          - table: ${self:custom.tables.bookings}
            sources: [./seeds/bookings.json]
      activities:
        sources:
          - table: ${self:custom.tables.activities}
            sources: [./seeds/activities.json]
      availabilities:
        sources:
          - table: ${self:custom.tables.availabilities}
            sources: [./seeds/availabilities.json]

functions:
  listActivities:
    handler: src/handlers/handler.listActivities
    events:
      - http:
          method: get
          path: activities
  viewActivity:
    handler: src/handlers/handler.viewActivity
    events:
      - http:
          method: get
          path: activities/{activityId}
  listActivityAvailabilities:
    handler: src/handlers/handler.listAvailabilities
    events:
      - http:
          method: get
          path: activities/{activityId}/availabilities
  listTravelBandActivities:
    handler: src/handlers/handler.listTravelBandActivities
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/activities
  shareActivityToTravelBand:
    handler: src/handlers/handler.shareActivity
    events:
      - http:
          method: post
          path: activities/{activityId}/share
  listTravelBandSpotters:
    handler: src/handlers/handler.listTravelBandSpotters
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/spotters
  listFolders:
    handler: src/handlers/handler.listFolders
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/folders
  createFolder:
    handler: src/handlers/handler.createFolder
    events:
      - http:
          method: post
          path: travel-bands/{travelBandId}/folders
  listActivitiesInFolder:
    handler: src/handlers/handler.listActivitiesInFolder
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/folders/{folderId}/activities
  listBookingsInTravelBand:
    handler: src/handlers/handler.listBookingsForTravelBand
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/bookings

resources:
  Resources:
    # Spotters model - Users
    SpottersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: spotterId
            AttributeType: S
        KeySchema:
          - AttributeName: spotterId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.spotters}
    # Travel band Model
    TravelBandDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: travelBandId
            AttributeType: S
        KeySchema:
          - AttributeName: travelBandId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.travelBands}
    #
    ActivitiesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: activityId
            AttributeType: S
        KeySchema:
          - AttributeName: activityId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.activities}
    #
    OfficeDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: officeId
            AttributeType: S
        KeySchema:
          - AttributeName: officeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.offices}
    #
    BookingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: bookingId
            AttributeType: S
          - AttributeName: travelBandId
            AttributeType: S
        KeySchema:
          - AttributeName: travelBandId
            KeyType: HASH
          - AttributeName: bookingId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.bookings}
    AvailabilitiesDynamodbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: availabilityId
            AttributeType: S
          - AttributeName: activityId
            AttributeType: S
        KeySchema:
          - AttributeName: activityId
            KeyType: HASH
          - AttributeName: availabilityId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.availabilities}
    TravelBandActivitiesDynamodbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: travelBandId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: travelBandId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.travelBandActivities}

package:
  exclude:
    - coverage/**
    - .circleci/**
    - seeds/**
    - src/__tests__/**
    - src/__e2e__/**
    - .vscode/**
    - .idea/**
    - .env
    - .env.prod
    - .gitignore
    - README.md
    - '*.{ts,js,json,yml}'
  include:
    - src/**
    - '!src/**/*.spec.js'
    - '!src/**/*.serverless.yml'
