service:
  name: spotter

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'eu-west-1'}
  #stage: ${opt:stage, self:custom.defaultStage}
  #profile: ${self:custom.profiles.${self:provider.stage}}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["SpottersDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["TravelBandDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["ActivitiesDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["OfficeDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["BookingDynamoDbTable", "Arn" ] }
        - { "Fn::GetAtt": ["AvailabilitiesDynamodbTable", "Arn" ] }
        - { "Fn::GetAtt": ["TravelBandActivitiesDynamodbTable", "Arn" ] }
        - { "Fn::GetAtt": ["CategoriesDynamoDbTable", "Arn" ] }
  environment:
    LOCAL_ENDPOINT: ${file(./config.${self:provider.stage}.json):AWS_ENDPOINT}
    LOCAL_REGION: ${file(./config.${self:provider.stage}.json):AWS_REGION}
    DB_TABLE_BOOKINGS: ${self:custom.tables.bookings}
    DB_TABLE_TRAVELBANDS: ${self:custom.tables.travelBands}
    DB_TABLE_TRAVELBANDACTIVITIES: ${self:custom.tables.travelBandActivities}
    DB_TABLE_ACTIVITIES: ${self:custom.tables.activities}
    DB_TABLE_AVAILABILITIES: ${self:custom.tables.availabilities}
    DB_TABLE_SPOTTERS: ${self:custom.tables.spotters}
    DB_TABLE_OFFCIES: ${self:custom.tables.offices}
    DB_TABLE_CATEGORIES: ${self:custom.tables.categories}

custom:
  documentation: ${file(docs/serverless.doc.yml):documentation}
  # DynamoDB table names
  tables:
    bookings: bookings
    travelBands: travelBands
    travelBandActivities: travelBandActivities
    activities: activities
    availabilities: availabilities
    spotters: spotters
    offices: offices
    categories: categories
  defaultStage: dev
  profiles:
    dev: dev
    staging: staging
    prod: prod
  dynamodb:
    start:
      migrate: true
      seed: true
      port: 8000
    seed:
      spotters:
        sources:
          - table: ${self:custom.tables.spotters}
            sources: [./seeds/spotters.json]
      travelBands:
        sources:
          - table: ${self:custom.tables.travelBands}
            sources: [./seeds/travelBands.json]
          - table: ${self:custom.tables.travelBandActivities}
            sources: [./seeds/travelBandActivities.json]
          - table: ${self:custom.tables.bookings}
            sources: [./seeds/bookings.json]
      activities:
        sources:
          - table: ${self:custom.tables.activities}
            sources: [./seeds/activities.json]
      availabilities:
        sources:
          - table: ${self:custom.tables.availabilities}
            sources: [./seeds/availabilities.json]
      categories:
        sources:
          - table: ${self:custom.tables.categories}
            sources: [./seeds/categories.json]

functions:
  listHighlightedActivities:
    handler: src/handlers/handler.listHighlightedActivities
    events:
      - http:
          method: get
          path: activities/highlights
          documentation: ${file(docs/serverless.doc.yml):endpoints.listHighlightedActivities}
  listActivities:
    handler: src/handlers/handler.listActivities
    events:
      - http:
          method: get
          path: activities
          documentation: ${file(docs/serverless.doc.yml):endpoints.listActivities}
  viewActivity:
    handler: src/handlers/handler.viewActivity
    events:
      - http:
          method: get
          path: activities/{activityId}
          documentation: ${file(docs/serverless.doc.yml):endpoints.viewActivity}
  createReaction:
    handler: src/handlers/handler.createReaction
    events:
      - http:
          method: post
          path: /travel-bands/{travelBandId}/activities/{activityId}/reactions
          documentation: ${file(docs/serverless.doc.yml):endpoints.createReaction}
  deleteReaction:
    handler: src/handlers/handler.deleteReaction
    events:
      - http:
          method: delete
          path: /travel-bands/{travelBandId}/activities/{activityId}/reactions
          documentation: ${file(docs/serverless.doc.yml):endpoints.deleteReaction}
  listActivityAvailabilities:
    handler: src/handlers/handler.listAvailabilities
    events:
      - http:
          method: get
          path: activities/{activityId}/availabilities
  listSpotters:
    handler: src/handlers/handler.listSpotters
    events:
      - http:
          method: get
          path: spotters
          documentation: ${file(docs/serverless.doc.yml):endpoints.listSpotters}
  inviteSpotterToTravelBand:
    handler: src/handlers/handler.inviteSpotter
    events:
      - http:
          method: post
          path: travel-bands/{travelBandId}/spotters
          documentation: ${file(docs/serverless.doc.yml):endpoints.inviteSpotter}
  createTravelBand:
    handler: src/handlers/handler.createTravelBand
    events:
      - http:
          method: post
          path: travel-bands
          documentation: ${file(docs/serverless.doc.yml):endpoints.createTravelBand}
  listTravelBands:
    handler: src/handlers/handler.listTravelBands
    events:
      - http:
          method: get
          path: travel-bands
          documentation: ${file(docs/serverless.doc.yml):endpoints.listTravelBands}
  listTravelBandActivities:
    handler: src/handlers/handler.listTravelBandActivities
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/activities
          documentation: ${file(docs/serverless.doc.yml):endpoints.listTravelBandActivities}
  shareActivityToTravelBand:
    handler: src/handlers/handler.shareActivity
    events:
      - http:
          method: post
          path: activities/{activityId}/share
          documentation: ${file(docs/serverless.doc.yml):endpoints.shareActivity}
  listTravelBandSpotters:
    handler: src/handlers/handler.listTravelBandSpotters
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/spotters
  listFolders:
    handler: src/handlers/handler.listFolders
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/folders
  createFolder:
    handler: src/handlers/handler.createFolder
    events:
      - http:
          method: post
          path: travel-bands/{travelBandId}/folders
  listActivitiesInFolder:
    handler: src/handlers/handler.listActivitiesInFolder
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/folders/{folderId}/activities
  listBookingsInTravelBand:
    handler: src/handlers/handler.listBookingsForTravelBand
    events:
      - http:
          method: get
          path: travel-bands/{travelBandId}/bookings
  listAllBookings:
    handler: src/handlers/handler.listAllBookings
    events:
      - http:
          method: get
          path: bookings
          documentation: ${file(docs/serverless.doc.yml):endpoints.listAllBookings}
  listCategories:
    handler: src/handlers/handler.listCategories
    events:
      - http:
          method: get
          path: categories
          documentation: ${file(docs/serverless.doc.yml):endpoints.listCategories}

resources:
  Resources:
    # Spotters model - Users
    SpottersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: spotterId
            AttributeType: S
        KeySchema:
          - AttributeName: spotterId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.spotters}
    # Travel band Model
    TravelBandDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: travelBandId
            AttributeType: S
        KeySchema:
          - AttributeName: travelBandId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.travelBands}
    #
    ActivitiesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: activityId
            AttributeType: S
        KeySchema:
          - AttributeName: activityId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.activities}
    #
    OfficeDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: officeId
            AttributeType: S
        KeySchema:
          - AttributeName: officeId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.offices}
    #
    BookingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: bookingId
            AttributeType: S
          - AttributeName: travelBandId
            AttributeType: S
        KeySchema:
          - AttributeName: travelBandId
            KeyType: HASH
          - AttributeName: bookingId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.bookings}
    AvailabilitiesDynamodbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: availabilityId
            AttributeType: S
          - AttributeName: activityId
            AttributeType: S
        KeySchema:
          - AttributeName: activityId
            KeyType: HASH
          - AttributeName: availabilityId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.availabilities}
    TravelBandActivitiesDynamodbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: travelBandId
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: travelBandId
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.travelBandActivities}
    CategoriesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: categoryId
            AttributeType: S
        KeySchema:
          - AttributeName: categoryId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tables.categories}

package:
  exclude:
    - coverage/**
    - .circleci/**
    - seeds/**
    - src/__tests__/**
    - src/__e2e__/**
    - .vscode/**
    - .idea/**
    - .env
    - .env.prod
    - .gitignore
    - README.md
    - '*.{ts,js,json,yml}'
  include:
    - src/**
    - '!src/**/*.spec.js'
    - '!src/**/*.serverless.yml'
