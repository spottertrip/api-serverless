documentation:
  api:
    info:
      version: '1'
      title:  'Spotters API'
      description: 'This is the documentation for the Spotters back-end API'
  models:
    - name: ErrorResponse
      description: Response type when an error occurs in the back-end
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          message:
            type: string
          errors:
            type: array
            items:
              type: string
    - name: "Booking"
      contentType: "application/json"
      schema: ${file(docs/models/bookings.yml):schema}
    - name: "Category"
      contentType: "application/json"
      schema: ${file(docs/models/categories.yml):schema}
    - name: "Activity"
      contentType: "application/json"
      schema: ${file(docs/models/activity.yml):schema}
    - name: "Folder"
      contentType: "application/json"
      schema: ${file(docs/models/folder.yml):schema}
    - name: "Spotter"
      contentType: "application/json"
      schema: ${file(docs/models/spotter.yml):schema}
    - name: "TravelBand"
      description: "Representation of a TravelBand data structure"
      contentType: application/json
      schema: ${file(docs/models/travelBand.yml):schema}
    - name: "ListTravelBandActivitiesResponse"
      description: "List of activities retrieved from Travel Bands linked activities"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: array
        items:
          type: object
          properties: ${file(docs/models/activity.yml):schema.properties}
    - name: "ListTravelBandsResponse"
      description: "Response for List travel bands Endpoint"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: array
        items:
          type: object
          properties: ${file(docs/models/travelBand.yml):schema.properties}
    - name: "ListActivitiesResponse"
      description: "Response for List of activities"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          activities:
            type: array
            items:
              type: object
              properties: ${file(docs/models/activity.yml):schema.properties}
          lastEvaluatedId:
            type: string
            description: |
              ID of the last activity treated inside DynamoDB, used for pagination.
              At first call, save this lastEvaluatedId somewhere, so you may use it for following call, in order to retrieve the n (n being the number of results asked in query parameter itemsPerPage) following activities.
              Repeat this step to paginate activities.
    - name: "ListSpottersResponse"
      description: "Response for List of spotters - Search a specific username/email"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: array
        items:
          type: object
          properties: ${file(docs/models/spotter.yml):schema.properties}
    - name: "ListCategoriesResponse"
      description:
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          categories:
            description: "List of categories"
            type: array
            items:
              type: object
              properties: ${file(docs/models/categories.yml):schema.properties}
          count:
            type: integer
            description: "Number of categories retrieved"
    - name: "ShareActivityRequest"
      description: "Request body for the share activity endpoint containing the travel band ID"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          travelBandId:
            description: ID of the travel band in which user wants to share an activity
            type: string
    - name: "ShareActivityResponse"
      description: "Response for share activity endpoint containing shared Activity and shared state"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          activity:
            description: The activity shared inside the travel band
            type: object
            properties: ${file(docs/models/activity.yml):schema.properties}
          shared:
            description: Indicates whether the activity has been shared properly
            type: boolean
    - name: "ViewActivityResponse"
      description: "Response for view activity endpoint: Contains informations about the activity and related availabilities (calendar) and office"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties: ${file(docs/models/activity.yml):schema.properties}
    - name: "ListAllBookingsResponse"
      description: "Response for list bookings endpoint"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: array
        items:
          type: object
          properties: ${file(docs/models/bookings.yml):schema.properties}
    - name: "CreateTravelBandResponse"
      description: "Response for create travel band endpoint: Informations about created travel band"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          travelBand:
            type: object
            properties: ${file(docs/models/travelBand.yml):schema.properties}
    - name: "CreateTravelBandRequest"
      description: "Request for create travel band endpoint: name and description"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          name:
            description: "name of the travel band to create"
            type: string
          description:
            description: "description of the travel band to create (optional)"
            type: string
    - name: "CreateReactionRequest"
      description: "Request for create reaction endpoint: like or dislike"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          like:
            description: "Whether the spotter likes or dislikes the activity"
            type: boolean
    - name: "CreateReactionResponse"
      description: "Response for create reaction endpoint: Reaction (Spotter who reacted + like/dislike state)"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          username:
            description: "name of the spotter who created the reaction"
            type: string
          thumbnailUrl:
            description: "Profile picture thumbnail of the user sharing a reaction"
            type: string
          spotterId:
            description: "ID of the spotter sharing a reaction"
            type: string
          like:
            description: "Whether the spotter likes or dislikes the activity"
            type: boolean
    - name: "DeleteReactionResponse"
      description: "Response for delete reaction endpoint"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        properties:
          username:
            description: "name of the spotter who created the reaction"
            type: string
          thumbnailUrl:
            description: "Profile picture thumbnail of the user sharing a reaction"
            type: string
          spotterId:
            description: "ID of the spotter sharing a reaction"
            type: string
          like:
            description: "Whether the spotter likes or dislikes the activity"
            type: boolean
    - name: "ListHighlightedActivitiesResponse"
      description: "Response for a list of highlighted activities"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: array
        items:
          type: object
          properties: ${file(docs/models/activity.yml):schema.properties}
    - name: "InviteSpotterRequest"
      description: "Request for a spotter Invitation to a travel band"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: object
        properties:
          spotterId:
            description: "ID of the spotter to invite inside given Travel Band"
            type: string
    - name: "InviteSpotterResponse"
      description: "Response for a spotter invitation to a travel band"
      contentType: application/json
      schema:
        $schema: "http://json-schema.org/draft-07/schema#"
        type: object
        properties: ${file(docs/models/spotter.yml):schema.properties}


endpoints:
  listHighlightedActivities:
    summary: List Highlighted (chosen by staff members) activities
    description: Retrieve a list of highlighted activities, chosen by staff members. These activities are highlighted because of the quality that the staff wants to promote.
    methodResponse:
      - statusCode: "200"
        responseBody:
          description: 'List of activities '
        responseModels:
          application/json: ListHighlightedActivitiesResponse
      - statusCode: "500"
        responseBody:
          description: An Error occured
        responseModels:
          application/json: ErrorResponse
  listTravelBandActivities:
    summary: List activities related to a travel band/wishlist
    description: List/Filter activities inside a travel band
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: 'List of activities matching given criterias, if none given, will retrieve all activities (number of activities and offset are defined with a proper pagination).'
        responseModels:
          application/json: ListTravelBandActivitiesResponse
      - statusCode: "500"
        responseBody:
          description: An Error occured
        responseModels:
          application/json: ErrorResponse

  listTravelBands:
    summary: List all travel bands in which a user has been invited
    description: List travel bands linked to a user, in which he has been invited or has created himself
    requestHeaders:
      - name: "X-Spotter"
        description: "Spotter ID of the logged-in user: used for authentication, REQUIRED"
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: 'The list of travel bands linked to the user'
        responseModels:
          application/json: ListTravelBandsResponse
      - statusCode: "500"
        responseBody:
          description: An error occured during connection to the Database
        responseModels:
          application/json: ErrorResponse

  createTravelBand:
    summary: Create a travel band (Wishlist)
    description: "Create a travel band, and add currently logged in user to the travel band"
    requestHeaders:
      - name: "X-Spotter"
        description: "Spotter ID of the logged-in user: used for authentication, REQUIRED"
    requestBody:
      description: "Travel band name and description (optional)"
    requestModels:
      application/json: "CreateTravelBandRequest"
    methodResponses:
      - statusCode: "201"
        responseBody:
          description: "Created Travel band"
        responseModels:
          application/json: CreateTravelBandResponse
      - statusCode: "500"
        responseBody:
          description: "An error occured"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "404"
        responseBody:
          description: "Spotter is not found"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "400"
        responseBody:
          description: "The given travel band is invalid"
        responseModels:
          application/json: ErrorResponse

  createReaction:
    summary: React/show (dis)interest to an activity shared inside a travel band
    description: React/show (dis)interest to an activity shared inside a travel band
    requestBody:
      description: "Whether the spotter wants to like or dislike the activity"
    requestModels:
      application/json: "CreateReactionRequest"
    pathParams:
      - name: activityId
        description: "ID of the activity to react to"
        schema:
          type: string
      - name: travelBandId
        description: "ID of travel band in which the activity has been shared"
        schema:
          type: string
    methodResponses:
      - statusCode: "201"
        responseBody:
          description: 'Reaction has been created/updated properly'
        responseModels:
          application/json: CreateReactionResponse
      - statusCode: "400"
        responseBody:
          description: Invalid parameters
        responseModels:
          application/json: ErrorResponse
      - statusCode: "404"
        responseBody:
          description: "Either spotter, travel band or activity not found"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "401"
        responseBody:
          description: "Spotter tries to react to an activity inside a travel band in which he has not been invited"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "500"
        responseBody:
          description: An error occured
        responseModels:
          application/json: ErrorResponse

  deleteReaction:
    summary: Delete a reaction to an activity
    description: Delete reaction to an activity for current spotter
    pathParams:
      - name: activityId
        description: "ID of the activity to react to"
        schema:
          type: string
      - name: travelBandId
        description: "ID of travel band in which the activity has been shared"
        schema:
          type: string
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: 'Reaction has been deleted properly'
        responseModels:
          application/json: DeleteReactionResponse
      - statusCode: "400"
        responseBody:
          description: Invalid parameters
        responseModels:
          application/json: ErrorResponse
      - statusCode: "404"
        responseBody:
          description: "Either spotter, travel band or activity not found"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "401"
        responseBody:
          description: "Spotter tries to react to an activity inside a travel band in which he has not been invited"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "500"
        responseBody:
          description: An error occured
        responseModels:
          application/json: ErrorResponse

  listActivities:
    summary: List/Filter Activities
    description: List/filter paginated activities on multiple criterias
    queryParams:
      - name: "itemsPerPage"
        description: "Number of activities to retrieve per page, defaults to 20"
        schema:
          type: integer
      - name: "lastEvaluatedId"
        description: "ID of the last activity processed by pagination, use it to start retrieving activities from this activity (next items)"
        schema:
          type: string
      - name: "q"
        description: "Query parameter: terms that the user would like to search in activity name/description, office name and location (city, country, street)"
        schema:
          type: string
      - name: "priceMin"
        description: "Minimum price filter, will find activities with price higher than this parameter"
        schema:
          type: integer
      - name: "priceMax"
        description: "Maximum price filter, will find activities with price lower than this parameter"
        schema:
          type: integer
      - name: "category"
        description: "ID of the category in which user wants to search activities for"
        schema:
          type: string
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: 'List of activities matching filters'
        responseModels:
          application/json: ListActivitiesResponse
      - statusCode: "500"
        responseBody:
          description: An error occured
        responseModels:
          application/json: ErrorResponse

  listCategories:
    summary: List Activity Categories
    description: Retrieve a list of all categories of activities
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: "List of categories"
        responseModels:
          application/json: ListCategoriesResponse
      - statusCode: "500"
        responseBody:
          description: An error occured
        responseModels:
          application/json: ErrorResponse

  shareActivity:
    summary: Share an activity to a TravelBand
    description: Share an activity inside a travel band. Adds an activity to a wishlist
    requestBody:
      description: "Requires the travel band id in which you want to share the activity"
    requestModels:
      application/json: "ShareActivityRequest"
    pathParams:
      - name: "activityId"
        description: ID of the activity the user wants to share inside his travel band
        schema:
          type: string
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: Activity document created
        responseModels:
          application/json: ShareActivityResponse
      - statusCode: "400"
        responseBody:
          description: Bad request, the activity ID is not valid, travel band ID is either absent or invalid or the activity has already been shared to the travel band
        responseModels:
          application/json: ErrorResponse
      - statusCode: "404"
        responseBody:
          description: Either the shared activity does not exist for given ID, or travel band in which user wants to share activity does not exist
        responseModels:
          application/json: ErrorResponse

  viewActivity:
    summary: View all details about an activity
    description: Get details about an activity including name, image, description, the related Office who's organizing the activity as well as availabilities for the activity
    pathParams:
      - name: "activityId"
        description: "ID of the activity that the user wants to get details about"
        schema:
          type: string
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: "Activity is retrieved properly with its availabilities"
        responseModels:
          application/json: ViewActivityResponse
      - statusCode: "400"
        responseBody:
          description: Bad request, the provided activity ID is not a valid UUID
        responseModels:
          application/json: ErrorResponse
      - statusCode: "404"
        responseBody:
          description: "Activity does not exist with given ID"
        responseModels:
          application/json: ErrorResponse

  listAllBookings:
    summary: List all bookings for a spotter
    description: List all bookings made inside all travel-bands in which a given spotter is a member.
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: "Bookings"
        responseModels:
          application/json: ListAllBookingsResponse
      - statusCode: "500"
        responseBody:
          description: "Internal Error: Database"
        responseModels:
          application/json: ErrorResponse

  listSpotters:
    summary: Find a list of spotters from given username or email
    description: Find a list of spotters from a given username or email, results are paginated
    queryParams:
      - name: "q"
        description: "Query, to look for in either username or email of spotters to search"
        schema:
          type: string
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: "List of spotters with given query matching either username or email"
        responseModels:
          application/json: ListSpottersResponse
      - statusCode: "500"
        responseBody:
          description: "Internal Error: Database"
        responseModels:
          application/json: ErrorResponse

  inviteSpotter:
    summary: Invite A Spotter to join a Travel Band (Wishlist)
    description: Invite a Spotter to join a given travel band, checks for authorizations of logged in user (whether he may invite members inside the travel band) and invite given spotter into given travel band
    requestHeaders:
      - name: "X-Spotter"
        description: "Spotter ID of the logged-in user: used for authentication, REQUIRED"
    requestBody:
      description: "Spotter ID to invite"
      requestModels:
        application/json: "InviteSpotterRequest"
    pathParams:
      - name: travelBandId
        description: "ID of travel band in which the spotter has been invited"
        schema:
          type: string
    methodResponses:
      - statusCode: "200"
        responseBody:
          description: "Spotter invited to join the travel band"
        responseModels:
          application/json: InviteSpotterResponse
      - statusCode: "401"
        responseBody:
          description: "Logged in user is not allowed to invite spotters to given travel band"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "404"
        responseBody:
          description: "Given spotter does not exist"
        responseModels:
          application/json: ErrorResponse
      - statusCode: "500"
        responseBody:
          description: "Internal Error: Database"
        responseModels:
          application/json: ErrorResponse
